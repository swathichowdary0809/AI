import random
class RoboticVacuumCleaner:
    def __init__(self, grid_size):
        self.grid_size = grid_size
        self.room = [["C" for _ in range(grid_size)] for _ in range(grid_size)]
        self.x, self.y = 0, 0  
        self.num_dirt = min(int(input(f"Enter number of dirt spots (1-{grid_size}): ")), grid_size)
        self.num_obstacles = min(int(input(f"Enter number of obstacles (1-{grid_size//2}): ")), grid_size // 2)

        self.place_items("D", self.num_dirt)
        self.place_items("O", self.num_obstacles)

    def place_items(self, item, count):
        """Places dirt (D) or obstacles (O) randomly in the room."""
        placed = 0
        while placed < count:
            x, y = random.randint(0, self.grid_size-1), random.randint(0, self.grid_size-1)
            if (x, y) != (0, 0) and self.room[x][y] == "C":  # Don't overwrite and avoid start position
                self.room[x][y] = item
                placed += 1

    def display_room(self):
        for row in self.room:
            print(" ".join(row))
        print()

    def clean(self):
        if self.room[self.x][self.y] == "D":
            self.room[self.x][self.y] = "C"
            print(f"Cleaned dirt at ({self.x}, {self.y})")
        else:
            print(f"No dirt at ({self.x}, {self.y})")

    def move(self, direction):
        new_x, new_y = self.x, self.y  # Store potential new position

        if direction == "up" and self.x > 0:
            new_x -= 1
        elif direction == "down" and self.x < self.grid_size - 1:
            new_x += 1
        elif direction == "left" and self.y > 0:
            new_y -= 1
        elif direction == "right" and self.y < self.grid_size - 1:
            new_y += 1
        else:
            print("Cannot move in that direction.")
            return

        if self.room[new_x][new_y] != "O": 
            self.x, self.y = new_x, new_y
        else:
            print("Encountered an obstacle! Choose another direction.")

    def navigate_and_clean(self):
        moves = 0
        max_moves = 5  

        while moves < max_moves:
            self.display_room()
            print(f"Current position: ({self.x}, {self.y})")

            self.clean()

            valid_moves = [d for d in ["up", "down", "left", "right"] if self.is_valid_move(d)]
            if not valid_moves:
                print("No valid moves left. Cleaning complete!")
                break

            move = input(f"Choose a direction {valid_moves}: ").lower()
            if move in valid_moves:
                self.move(move)
                moves += 1
            else:
                print("Invalid input. Try again.")

        print("Maximum 5 moves reached. Cleaning stopped.")

    def is_valid_move(self, direction):
        new_x, new_y = self.x, self.y

        if direction == "up" and new_x > 0:
            new_x -= 1
        elif direction == "down" and new_x < self.grid_size - 1:
            new_x += 1
        elif direction == "left" and new_y > 0:
            new_y -= 1
        elif direction == "right" and new_y < self.grid_size - 1:
            new_y += 1
        else:
            return False

        return self.room[new_x][new_y] != "O"  
while True:
    grid_size = int(input("Enter grid size (3-10): "))
    if 3 <= grid_size <= 10:
        break
    print("Grid size must be between 3 and 10.")
vacuum = RoboticVacuumCleaner(grid_size)
vacuum.navigate_and_clean()
