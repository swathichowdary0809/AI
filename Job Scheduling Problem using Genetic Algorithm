import random
import numpy as np

num_jobs = 8
num_machines = 4
population_size = 100
num_generations = 200
mutation_rate = 0.2  

processing_times = [random.randint(5, 20) for _ in range(num_jobs)]

def initialize_population():
    return [np.random.randint(0, num_machines, num_jobs).tolist() for _ in range(population_size)]

def fitness(chromosome):
    machine_times = [0] * num_machines
    for job, machine in enumerate(chromosome):
        machine_times[machine] += processing_times[job]
    return 1 / max(machine_times)  

def select_parents(population):
    tournament = random.sample(population, 10)
    tournament.sort(key=fitness, reverse=True)
    return tournament[:2]

def crossover(parent1, parent2):
    child1, child2 = parent1[:], parent2[:]
    for i in range(num_jobs):
        if random.random() < 0.5:
            child1[i], child2[i] = child2[i], child1[i]
    return child1, child2

def mutate(chromosome):
    if random.random() < mutation_rate:
        idx = random.randint(0, num_jobs - 1)
        chromosome[idx] = random.randint(0, num_machines - 1)
    return chromosome

def genetic_algorithm():
    population = initialize_population()
    
    for _ in range(num_generations):
        parents = select_parents(population)
        offspring = []
        
        for _ in range(population_size // 2):
            child1, child2 = crossover(parents[0], parents[1])
            offspring.append(mutate(child1))
            offspring.append(mutate(child2))
        
        population = sorted(population, key=fitness, reverse=True)[:population_size - len(offspring)] + offspring
    
    best_solution = max(population, key=fitness)
    best_makespan = 1 / fitness(best_solution)
    
    return best_solution, best_makespan, processing_times

best_schedule, best_time, random_processing_times = genetic_algorithm()

print("Processing Times:", random_processing_times)
print("Best Job Schedule:", best_schedule)
print("Minimum Completion Time:", best_time)
